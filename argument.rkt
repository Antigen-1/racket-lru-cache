#lang racket/base
(require (for-template syntax/parse/define))
(provide (struct-out argument-info)
         (struct-out formals-info)
         parse-formals)

(struct argument-info (keyword name value) #:constructor-name make-info)
(struct formals-info (fixed rest) #:constructor-name make-info-list)

(define (arg->section a)
  (cond ((argument-info-keyword a) 'keyword)
        ((and (not (argument-info-keyword a)) (not (argument-info-value a)))
         'positional)
        (else 'positional/optional)))
(define (check-arg-sections fixed (section #f))
  (cond ((null? fixed) #f)
        (else (case (list section (arg->section (car fixed)))
                (((positional positional/optional))
                 (check-arg-sections (cdr fixed) 'positional/optional))
                (((_ keyword))
                 (check-arg-sections (cdr fixed) section))
                (((#f _))
                 (check-arg-sections (cdr fixed) (arg->section (car fixed))))
                (((positional/optional positional))
                 (raise-syntax-error #f "default-value expression missing" (argument-info-name (car fixed))))
                (else (check-arg-sections (cdr fixed) section))))))
(define (make-info-list/checks fixed rest)
  (cond ((check-duplicate-identifier `(,@(map argument-info-name fixed) ,@(if rest (list rest) null)))
         => (lambda (id) (raise-syntax-error #f "duplicate identifiers" id)))
        ((check-arg-sections fixed))
        (else (make-info-list fixed rest))))

(define-splicing-syntax-class argument
  #:description "argument syntax of lambda/lru-cache"
  (pattern (~seq name:id))
  (pattern (~seq (name:id value:expr)))
  (pattern (~seq keyword:keyword name:id))
  (pattern (~seq keyword:keyword (name:id value:expr))))
(define (parse-argument stx)
  (syntax-parse stx
    ((name:id)
     (make-info #f #'name #f))
    (((name:id value:expr))
     (make-info #f #'name #'value))
    ((keyword:keyword name:id)
     (make-info #'keyword #'name #f))
    ((keyword:keyword (name:id value:expr))
     (make-info #'keyword #'name #'value))
    (_ (raise-syntax-error #f "fail to parse the argument" stx))))

(define (parse-formals stx)
  (syntax-parse stx
    (arg:id (make-info-list/checks null #'arg))
    ((arg:argument ...)
     (make-info-list/checks
      (map parse-argument (syntax->list #'(arg ...)))
      #f))
    ((arg:argument ... . rest:id)
     (make-info-list/checks
      (map parse-argument (syntax->list #'(arg ...)))
      #'rest))
    (_ (raise-syntax-error #f "fail to parse formals" stx))))
